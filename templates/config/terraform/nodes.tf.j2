resource "aws_instance" "#{ cluster_name }#-installer" {
  ami                    = local.aws_installer_ami
  instance_type          = local.aws_installer_type
  iam_instance_profile   = aws_iam_instance_profile.#{ cluster_name }#-dns-profile.name


  subnet_id              = aws_subnet.#{ cluster_name }#-subnet.id
  key_name               = aws_key_pair.#{ cluster_name }#-login-key.key_name
  vpc_security_group_ids = [aws_security_group.#{ cluster_name }#-main.id]
  associate_public_ip_address = "true"

  user_data              = file("resources/user-data-node-RHEL9.sh")

  provisioner "file" {
    source      = "#{ ssh.private_key }#"
    destination = "/home/ec2-user/.ssh/id_rsa"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  provisioner "remote-exec" {
    inline = [
      "mkdir -p /home/ec2-user/install/inventory_vars",
    ]
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  provisioner "file" {
    content = templatefile("resources/inventory.tpl", {
      cluster_domain  = local.cluster_domain
    })
    destination = "/home/ec2-user/install/inventory"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  provisioner "file" {
    content = templatefile("resources/inventory_vars.tpl.yaml", {
      cluster_domain  = local.cluster_domain
      cluster_password = local.cluster_password
      redhat_token = local.redhat_token
      redhat_username = local.redhat_username
      redhat_password = local.redhat_password
    })
    destination = "/home/ec2-user/install/inventory_vars/variables.yaml"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  provisioner "file" {
    source      = "resources/update-dns-zone.sh"
    destination = "/home/ec2-user/update-dns-zone.sh"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  provisioner "file" {
    source      = "resources/main.yaml"
    destination = "/home/ec2-user/install/main.yaml"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  provisioner "file" {
    source      = "resources/reboot.yaml"
    destination = "/home/ec2-user/install/reboot.yaml"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  provisioner "file" {
    source      = "resources/requirements.yaml"
    destination = "/home/ec2-user/install/requirements.yaml"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  provisioner "file" {
    source      = "resources/ansible.cfg"
    destination = "/home/ec2-user/install/ansible.cfg"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  root_block_device {
    volume_size = 30
  }

  tags = {
    Name = "${ local.cluster_name }-installer"
    AUTO_DNS_ZONE = aws_route53_zone.#{ cluster_name }#-private.zone_id
    AUTO_DNS_NAME = "installer.${ local.cluster_domain }"
  }
}

resource "ansible_host" "#{ cluster_name }#-installer" {
  name   = aws_instance.#{ cluster_name }#-installer.public_dns
  groups = ["installer"]
  variables = {
    ansible_user                 = "ec2-user",
    ansible_ssh_private_key_file = "#{ ssh.private_key }#",
    ansible_ssh_extra_args       = " -o StrictHostKeyChecking=no ",
    cluster_hostname             = "installer.${ local.cluster_domain }",
    cluster_private_ip           = aws_instance.#{ cluster_name }#-installer.private_ip,
    cluster_public_ip            = aws_instance.#{ cluster_name }#-installer.public_ip,
  }
}

#% for item in node_inventory %#
resource "aws_instance" "#{ item.name }#" {
  iam_instance_profile   = aws_iam_instance_profile.#{ cluster_name }#-dns-profile.name
  #% if item.role == "client" %#
  ami                    = "#{ aws.ami.client.id }#"
  instance_type          = "#{ aws.ami.client.type }#"
  #% else %#
  ami                    = "#{ aws.ami.platform.id }#"
  instance_type          = "#{ aws.ami.platform.type }#"
  #% endif %#
  subnet_id              = aws_subnet.#{ cluster_name }#-subnet.id
  key_name               = aws_key_pair.#{ cluster_name }#-login-key.key_name
  vpc_security_group_ids = [aws_security_group.#{ cluster_name }#-main.id]
  user_data              = file("resources/user-data-node-RHEL9.sh")
  associate_public_ip_address = "true"

  provisioner "file" {
    source      = "resources/update-dns-zone.sh"
    destination = "/home/ec2-user/update-dns-zone.sh"
    connection {
      type        = local.connection["type"]
      user        = local.connection["user"]
      private_key = local.connection["private_key"]
      host        = self.public_ip
    }
  }

  root_block_device {
    volume_size = #{ item.disk }#
  }
  tags = {
    Name = "${ local.cluster_name }-#{ item.name }#"
    AUTO_DNS_ZONE = aws_route53_zone.#{ cluster_name }#-private.zone_id
    AUTO_DNS_NAME = "#{ item.name }#.${ local.cluster_domain }"
  }
}

resource "ansible_host" "#{ item.name }#" {
  name   = aws_instance.#{ item.name }#.public_dns
  groups = ["#{ item.role }#"]
  variables = {
    ansible_user                 = "ec2-user",
    ansible_ssh_private_key_file = "#{ ssh.private_key }#",
    ansible_ssh_extra_args       = " -o StrictHostKeyChecking=no ",
    cluster_hostname             = "#{ item.name }#.${ local.cluster_domain }",
    cluster_private_ip           = aws_instance.#{ item.name }#.private_ip,
    cluster_public_ip            = aws_instance.#{ item.name }#.public_ip,
  }
}

#% endfor %#

